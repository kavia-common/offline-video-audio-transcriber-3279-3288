{"is_source_file": true, "format": "Kotlin", "description": "Contains the implementation of AudioExtractor, a utility object for extracting and decoding audio from a URI into a mono 16 kHz PCM WAV file, including metadata about the original audio stream.", "external_files": ["android.content.Context", "android.media.MediaExtractor", "android.media.MediaCodec", "android.media.MediaFormat", "android.media.AudioFormat", "android.media.MediaCodecList", "android.os.Build", "android.net.Uri", "java.io.File", "java.io.FileOutputStream", "java.io.BufferedOutputStream", "java.io.RandomAccessFile", "java.io.IOException"], "external_methods": ["MediaCodec.createDecoderByType", "MediaFormat.getString", "MediaFormat.getInteger", "MediaFormat.containsKey", "MediaCodec.configure", "MediaCodec.start", "MediaCodec.dequeueInputBuffer", "MediaCodec.getInputBuffer", "MediaCodec.dequeueOutputBuffer", "MediaCodec.getOutputBuffer", "MediaCodec.releaseOutputBuffer", "MediaCodec.release", "ContentResolver.openFileDescriptor", "MediaExtractor.setDataSource", "MediaExtractor.getTrackFormat", "MediaExtractor.selectTrack", "MediaExtractor.readSampleData", "MediaExtractor.advance", "MediaExtractor.release", "Build.VERSION.SDK_INT", "Log.e"], "published": ["AudioExtractor", "AudioExtractor.AudioMeta"], "classes": [{"name": "AudioMeta", "description": "Metadata about the extracted audio, including original sample rate, channels, duration, and optional frame timestamps."}], "methods": [{"name": "extractToWav", "description": "Main method to extract audio from a Uri, decode it to PCM, resample, downmix to mono, and save as a WAV file with header fixup. Returns metadata about the original audio stream."}, {"name": "selectFirstDecodableAudioTrack", "description": "Selects the first non-DRM, decodable audio track in the media extractor."}, {"name": "writeWavHeaderPlaceholder", "description": "Writes an initial WAV header with placeholder sizes, to be overwritten after data is written."}, {"name": "fixupWavHeader", "description": "Updates the WAV header with the correct data size after writing PCM data."}, {"name": "downmixToMonoFloat", "description": "Converts multi-channel float PCM data to mono by averaging channels."}, {"name": "linearResampleMono", "description": "Resamples a mono float PCM array from source rate to target rate using linear interpolation, maintaining fractional position."}, {"name": "floatMonoToPcm16Le", "description": "Converts a float mono PCM array to 16-bit little-endian PCM bytes."}], "calls": ["MediaCodec.createDecoderByType", "MediaFormat.getString", "MediaFormat.getInteger", "MediaFormat.containsKey", "MediaCodec.configure", "MediaCodec.start", "decoder.dequeueInputBuffer", "decoder.getInputBuffer", "decoder.queueInputBuffer", "decoder.dequeueOutputBuffer", "decoder.getOutputBuffer", "decoder.releaseOutputBuffer", "decoder.release", "ContentResolver.openFileDescriptor", "extractor.setDataSource", "extractor.getTrackFormat", "extractor.selectTrack", "extractor.readSampleData", "extractor.advance", "RandomAccessFileCompat.seek", "RandomAccessFileCompat.writeIntLE", "Log.e"], "search-terms": ["AudioExtractor", "extractToWav", "PCM resampling", "WAV header fixup", "mono audio extraction", "audio decoding", "media track selection", "audio format detection"], "state": 2, "file_id": 15, "knowledge_revision": 82, "git_revision": "", "revision_history": [{"80": ""}, {"81": ""}, {"82": ""}], "hash": "84ae7b1d4962c5dc1d3c89826c6af7c5", "format-version": 4, "code-base-name": "android_frontend", "filename": "android_frontend/app/src/main/kotlin/org/example/app/media/AudioExtractor.kt"}