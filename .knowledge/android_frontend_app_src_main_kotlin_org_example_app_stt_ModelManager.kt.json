{"is_source_file": true, "format": "Kotlin", "description": "This Kotlin source file defines the `ModelManager` object, which provides utilities to manage offline Vosk speech recognition models within an Android application. It includes functionalities for checking the existence of valid models, importing models from URIs (zip files or directory trees), and validating model contents. The file contains methods for handling file extraction, URI permission persistence, and model validation logic.", "external_files": ["android.content.ContentResolver", "android.content.Context", "android.content.Intent", "android.net.Uri", "android.provider.DocumentsContract", "android.webkit.MimeTypeMap", "kotlinx.coroutines.CoroutineDispatcher", "kotlinx.coroutines.Dispatchers", "kotlinx.coroutines.withContext", "java.io.*", "java.util.zip.ZipEntry", "java.util.zip.ZipInputStream"], "external_methods": ["ContentResolver.takePersistableUriPermission", "ContentResolver.query", "ContentResolver.openInputStream", "DocumentsContract.isDocumentUri", "DocumentsContract.isTreeUri", "DocumentsContract.getTreeDocumentId", "DocumentsContract.buildChildDocumentsUriUsingTree", "DocumentsContract.buildDocumentUriUsingTree"], "published": ["ModelManager", "hasValidModel", "getCurrentModelName", "importModel"], "classes": [], "methods": [{"name": "modelsBaseDir", "description": "Returns the base directory where models are stored within the app's internal storage."}, {"name": "hasValidModel", "description": "Checks asynchronously whether at least one valid Vosk model exists in the models directory."}, {"name": "getCurrentModelName", "description": "Retrieves the name of the current valid model if available."}, {"name": "importModel", "description": "Imports a Vosk model from a given URI, handling zip files or directory trees, and validates the imported content."}, {"name": "persistPermissionIfNeeded", "description": "Attempts to persist read/write permissions for the provided URI if requested."}, {"name": "isZipLike", "description": "Heuristic to determine if a URI points to a zip file based on extension or MIME type."}, {"name": "getDisplayName", "description": "Retrieves a user-friendly display name for the URI's resource."}, {"name": "sanitizeName", "description": "Sanitizes a string to be a safe filename by replacing invalid characters."}, {"name": "unzipFromUri", "description": "Extracts a zip file from a URI into a target directory."}, {"name": "flattenIfSingleFolder", "description": "Flattens directory structure if a zip or directory contains only one subfolder."}, {"name": "copyTreeFromUri", "description": "Copies the directory tree from a URI to a local directory, handling document URIs."}, {"name": "copyTreeChildrenFromTree", "description": "Recursively copies children from a tree URI to a local directory."}, {"name": "copySingleFile", "description": "Copies a single file from a URI to a specified output file."}, {"name": "isValidVoskModelDir", "description": "Validates if a directory contains the necessary files or structure to be considered a valid Vosk model."}], "calls": ["contentResolver.takePersistableUriPermission", "contentResolver.query", "contentResolver.openInputStream", "DocumentsContract.isDocumentUri", "DocumentsContract.isTreeUri", "DocumentsContract.getTreeDocumentId", "DocumentsContract.buildChildDocumentsUriUsingTree", "DocumentsContract.buildDocumentUriUsingTree"], "search-terms": ["Vosk models", "import from URI", "zip extraction", "Android document handling", "model validation", "persistent permissions", "source file management"], "state": 2, "file_id": 14, "knowledge_revision": 41, "git_revision": "", "hash": "95648d8beb390933da885d6c1a24accb", "format-version": 4, "code-base-name": "android_frontend", "filename": "android_frontend/app/src/main/kotlin/org/example/app/stt/ModelManager.kt", "revision_history": [{"41": ""}]}